# thermreg_aggregation.py
#

#
#
#   LOG LINE PARSE SPECIFICATION: END USER DATA AGGREGATION
#
#   Your log analysis code will draw data from the log in the form
#   of lists (records) produced by the dataAggregation classes. They will
#   sample the data your require into lists that you design.
#
#   Below is the list aggregation design for the Thermal Log Verification process.
#
#
import mculog_parsetypes as pt
import mculog_aggregator as ma
import thermreg_log_specification as tlspec


## MappedLogData named tuple
##==========================
## arrays of these tuples are used to declare names of variables in the namespace
## of the aggregated data, and data analyzers
##
## the names generated by the parsing syntax are provided by the system coder, and
## not carefully selected for a well defined analytic paradigm, hence the renaming
## infrastructure within the MappedLogData lists
##
##
## TODO: use named tuples for more readable code..?


## ***********************************
## FAN CONTROL AND SPEED
## ***********************************
#
# the fanDutyCycleParseSpec, fanSpeedParseSpec identify the log lines
# that contribute the duty-cycle+pwm, and tach-rpm data.


## key identifies aggregator
fanStatsAggregator_key = "fanStatsAgg_key"

## sync labels are chronologically first and last fields populated

fanStatsStorageControl = ma.AggregationStorageControl(
                            FirstDatum='a0tach', LastDatum=None,
                            StoreOnCollision=False, StoreOnFull=True,
                            StoreIfEmpty=False)

## record map is the arrangement of labels in the aggregated record
## this can be re-aranged by the user at will
## fields can even be dropped - beware you may need to pick new sync labels
## fields can be added - beware you may have to add value maps to cause
## the aggregator to parse for the added labels

fanStatsAggregatedRecordMap = \
    ["a0dc",    "a0pwm",    "a0tach",   "a0rpm",
     "a2dc",    "a2pwm",    "a2tach",   "a2rpm",
     "a4dc",    "a4pwm",    "a4tach",   "a4rpm",
     "a6dc",    "a6pwm",    "a6tach",   "a6rpm",
     "a8dc",    "a8pwm",    "a8tach",   "a8rpm",
     "a0tach2", "a0rpm2",   "a2tach2",  "a2rpm2",
     "a4tach2", "a4rpm2",   "a6tach2",  "a6rpm2",
     "a8tach2", "a8rpm2"]

mapped_fanDutyCycleValues = [tlspec.fanDutyCycleParseSpec, [
    [["fansocket", "a0"], ["duty cycle", "pwm"], ["a0dc", "a0pwm"]],
    [["fansocket", "a2"], ["duty cycle", "pwm"], ["a2dc", "a2pwm"]],
    [["fansocket", "a4"], ["duty cycle", "pwm"], ["a4dc", "a4pwm"]],
    [["fansocket", "a6"], ["duty cycle", "pwm"], ["a6dc", "a6pwm"]],
    [["fansocket", "a8"], ["duty cycle", "pwm"], ["a8dc", "a8pwm"]]
]]

mapped_fanSpeedValues = [tlspec.fanSpeedParseSpec, [
    [["fansocket", "a0"], ["tach1 count", "rpm"], ["a0tach", "a0rpm"]],
    [["fansocket", "a2"], ["tach1 count", "rpm"], ["a2tach", "a2rpm"]],
    [["fansocket", "a4"], ["tach1 count", "rpm"], ["a4tach", "a4rpm"]],
    [["fansocket", "a6"], ["tach1 count", "rpm"], ["a6tach", "a6rpm"]],
    [["fansocket", "a8"], ["tach1 count", "rpm"], ["a8tach", "a8rpm"]],
    [["fansocket", "a0"], ["tach2 count", "rpm"], ["a0tach2", "a0rpm2"]],
    [["fansocket", "a2"], ["tach2 count", "rpm"], ["a2tach2", "a2rpm2"]],
    [["fansocket", "a4"], ["tach2 count", "rpm"], ["a4tach2", "a4rpm2"]],
    [["fansocket", "a6"], ["tach2 count", "rpm"], ["a6tach2", "a6rpm2"]],
    [["fansocket", "a8"], ["tach2 count", "rpm"], ["a8tach2", "a8rpm2"]]
]]

mapped_fanSpeedValues2 = [tlspec.fanSpeedParseSpec2, [
    [["fansocket", "a0"], ["tach1 count", "rpm"], ["a0tach", "a0rpm"]],
    [["fansocket", "a2"], ["tach1 count", "rpm"], ["a2tach", "a2rpm"]],
    [["fansocket", "a4"], ["tach1 count", "rpm"], ["a4tach", "a4rpm"]],
    [["fansocket", "a6"], ["tach1 count", "rpm"], ["a6tach", "a6rpm"]],
    [["fansocket", "a8"], ["tach1 count", "rpm"], ["a8tach", "a8rpm"]],
]]



## the aggregation recipe that is used to instantiate an aggregator
##...along with the sync labels and record label list
fanStatsAggregationMapList = [mapped_fanDutyCycleValues,
                              mapped_fanSpeedValues,
                              mapped_fanSpeedValues2]

## *******************************
## TEMPERATURE SENSOR MEASUREMENTS
## *******************************
#
# the epmTempSensor
#

tempAggregator_key = "fpgaTempAgg_key"

## "a2l" is the first label in the publishing cycle of the temperatures
## "epm2max" is the last HOWEVER: there may be an fpga only, or fpga+epm1 only
## system. In that case "a0r" or "epm1Max" would be the last labels
## TODO: deal with variant sync labels

fpgaTempStorageControl = ma.AggregationStorageControl(
                            FirstDatum="a2l", LastDatum=None,
                            StoreOnCollision=True, StoreOnFull=True,
                            StoreIfEmpty=False)

fpgaTempAggregateRecordMap = \
    ["a0l", "a0r", "a2l", "a2r", "a4l", "a4r",
     "a6l", "a6r", "a8l", "a8r", "epm1Max", "epm2Max"]

## mapped value(s)
## [[log line filter], [log line value label list],
mappedFpgaTempValues = [tlspec.fpgaTempSensorParseSpec, [
    [["fansocket", "a0"], ["local temperature", "remote temperature"], ["a0l", "a0r"]],
    [["fansocket", "a2"], ["local temperature", "remote temperature"], ["a2l", "a2r"]],
    [["fansocket", "a4"], ["local temperature", "remote temperature"], ["a4l", "a4r"]],
    [["fansocket", "a6"], ["local temperature", "remote temperature"], ["a6l", "a6r"]],
    [["fansocket", "a8"], ["local temperature", "remote temperature"], ["a8l", "a8r"]]
]]
mappedEpm1MaxTempValues = [tlspec.maxEPM1TempParseSpec, [
    [["*"], ["epm1MaxTemp"], ["epm1Max"]]
]]

mappedEpm2MaxTempValues = [tlspec.maxEPM2TempParseSpec, [
    [["*"], ["epm2MaxTemp"], ["epm2Max"]]
]]

tempAggregationMapList = [mappedFpgaTempValues,
                          mappedEpm1MaxTempValues,
                          mappedEpm2MaxTempValues]

## *********************************
## TEMPERATURE AND OTHER WARNINGS
## *********************************

## key identifies aggregator
systemAlertAggregator_key = "sysAlertAgg_key"

## the alerts do not have any chronological regularity
## so the sync labels don't exist, format with None

systemAlertStorageControl = ma.AggregationStorageControl(
                                    FirstDatum=None, LastDatum=None,
                                    StoreOnCollision=True, StoreOnFull=True,
                                    StoreIfEmpty=False)

## aggregation record for alerts and warnings
systemAlertAggregatedRecord = \
    ["sysfanalert", "sysovertemp", "epm1tempalert", "epm1ovrtemp",
     "epm2tempalert", "epm2ovrtemp", "fanfail", "a0fanfail", "a2fanfail",
     "a4fanfail", "a6fanfail", "a8fanfail"]

## the formula for finding the labeled data in the parsed log line
## input to the aggregator
mapped_fpgaWarningValues = [tlspec.fpgaWarningParseSpec, [
        [[pt.parseLineID, 'warning'], ["fan alert reported"],           ["sysfanalert"]],
        [[pt.parseLineID, 'warning'], ["fan overtemperature reported"], ["sysovertemp"]],
        [[pt.parseLineID, 'warning'], ["epm1 alert reported"],          ["epm1tempalert"]],
        [[pt.parseLineID, 'warning'], ["epm1 overtemperature reported"],["epm1ovrtemp"]],
        [[pt.parseLineID, 'warning'], ["epm2 alert reported"],          ["epm2tempalert"]],
        [[pt.parseLineID, 'warning'], ["epm2 overtemperature reported"],["epm2ovrtemp"]],
        [[pt.parseLineID, 'warning'], ["fan failure reported"],         ["fanfail"]],
        [[pt.parseLineID, 'warning'], ["fan a0 failure reported"],      ["a0fanfail"]],
        [[pt.parseLineID, 'warning'], ["fan a2 failure reported"],      ["a2fanfail"]],
        [[pt.parseLineID, 'warning'], ["fan a4 failure reported"],      ["a4fanfail"]],
        [[pt.parseLineID, 'warning'], ["fan a6 failure reported"],      ["a6fanfail"]],
        [[pt.parseLineID, 'warning'], ["fan a8 failure reported"],      ["a8fanfail"]]
    ]]

systemAlertAggregationMapList = [mapped_fpgaWarningValues]

## *********************************
##   EPM BOARD SENSORS AND WARNINGS
## *********************************

epmBoardAggregator_key = "epmBoardAgg_key"

epmBoardStorageControl = ma.AggregationStorageControl(
                            FirstDatum="epmx90b0", LastDatum=None,
                            StoreOnCollision=True, StoreOnFull=True,
                            StoreIfEmpty=False)


epmBoardAggregationRecord = ["epmx90b0", "epmx90b1", "epmx94b0", "epmx94b1",
                                "hitemp@epm", "overtemp@epm"]

mapped_EpmTempSensorValues = \
    [tlspec.epmTempSensorParseSpec, [
        [["*"], ["device 0x90 via bus 0"], ["epmx90b0"]],
        [["*"], ["device 0x90 via bus 1"], ["epmx90b1"]],
        [["*"], ["device 0x94 via bus 0"], ["epmx94b0"]],
        [["*"], ["device 0x94 via bus 1"], ["epmx94b1"]]
    ]]

mapped_localEpmAlertValues = \
    [tlspec.localEpmAlertParseSpec, [
        [[pt.parseLineID, 'epm reports'], ["alert"], ["hitemp@epm"]],
        [[pt.parseLineID, 'epm reports'], ["over temperature"], ["overtemp@epm"]]
    ]]

epmBoardAggregationMapList = [mapped_EpmTempSensorValues,
                              mapped_localEpmAlertValues]